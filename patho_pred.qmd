---
title: "Pathology prediction in rowers"
author: "FÃ©lix BOUDRY"
---

## Context

This analysis aim at detecting pathological athletes during an altitude training camp. To do so we used urine sample analysed by NMR. Here we try different models to detect the pathological samples to determine which one is the best.

```{r}
#| label: config
#| include: false
#| fig-align: center
set.seed(42)
library(tidyverse)
library(data.table)
library(knitr)
library(janitor)
library(psych)
library(kableExtra)
library(caret)
library(pls)
library(vip)
library(factoextra)
library(cluster)
library(ggfortify)
library(magrittr)
library(plotly)
library(ggpubr)
library(reshape2)
source("functions.R")

theme_set(new = theme_bw()) # ggplot theme
```

# Import and pre-processing

Pre-processing was done using [npflow](https://nmrprocflow.org). This pre-processing is based on the [Rnmr1D](https://cran.r-project.org/web/packages/Rnmr1D/index.html) package.

```{r}
#| label: import & pre-processing
antrop_data <- fread(input = "Data/subjects.csv") |>
  clean_names() |>
  select(c("age", "height", "weight"))
categories <- c("patho", "day", "Samplecode", "name", "surname", "discriminant", "date", "quality", "pathology_during")
data <- fread("Data/data.csv") |>
  mutate(across(-any_of(categories), ~ ReplaceMissingByLoD(int.mat = .x))) |>
  mutate(across(-any_of(categories), ~ scale(.x))) |>
  merge(fread("Data/samples.csv"), by = "Samplecode") |>
  replace_na(list(patho = 0, pathology_during = 0)) |>
  column_to_rownames(var = "Samplecode") |>
  mutate(patho = as.factor(patho))

# Define subsets datasets
condition_patho <- quo(patho == "1" & row_number() == min(which(patho == "1")))
condition_first <- quo(day == min(day) & pathology_during == "1")
condition_pre <- quo(lead(patho == "1" & row_number() == min(which(patho == "1"))))
condition_last <- quo(day == max(day) & pathology_during != "1")

data_first_patho <- data |>
  arrange(day) |>
  filter(!!condition_patho | !!condition_first, .by = c(name, surname)) |>
  suppressWarnings()

data_pre_patho <- data |>
  arrange(day) |>
  filter(!!condition_patho | !!condition_pre, .by = c(name, surname)) |>
  suppressWarnings()

data_last_patho <- data |>
  arrange(day) |>
  filter(!!condition_patho | !!condition_last, .by = c(name, surname)) |>
  suppressWarnings()

# Combine subsets into a list
data_sub <- list(
  data_first_patho = data_first_patho,
  data_pre_patho = data_pre_patho,
  data_last_patho = data_last_patho
)

# test set
test <- data |>
  group_by(name, surname) |>
  arrange(day) |>
  mutate(next_after_patho = lag(patho, default = "0") == "1") |>
  filter(day == "3" | patho == "1" | next_after_patho) |>
  ungroup() |>
  select(-next_after_patho)
```

# Data description

```{r}
#| label: data-description
describe(x = antrop_data, na.rm = TRUE) |>
  round(digits = 0) |>
  select(c("mean", "sd", "median", "min", "max")) |>
  kable(
    caption = paste0("Anthropological values (n = ", nrow(x = antrop_data), ")"),
    table.attr = 'data-quarto-disable-processing="true"'
  ) |>
  kable_styling(
    bootstrap_options = c("striped"),
    full_width = FALSE
  )
pca_res <- prcomp(x = select(.data = data, -any_of(categories)))
autoplot(
  object = pca_res,
  data = select(.data = data, -any_of(categories)),
  loadings.label.size = 3
) +
  geom_point(
    mapping = aes(color = data$patho),
    size = 2
  ) +
  geom_text(mapping = aes(label = rownames(data)), vjust = 0, hjust = 0) +
  stat_ellipse(mapping = aes(group = data$patho, color = data$patho)) +
  labs(color = "Patho")
```

# k-means

```{r}
#| label: km-pp
#| fig-align: center
lapply(data_sub, \(x) {
  patho <- x$patho
  km_res <- kmeans(
    x = select(.data = x, -any_of(categories)),
    centers = 2L,
    nstart = 25L
  )
  km_cluster <- km_res$cluster - 1
  fviz_cluster(
    object = km_res,
    data = select(.data = x, -any_of(categories)),
    geom = "none",
    shape = NULL
  ) +
    geom_point(
      mapping = aes(shape = patho),
      size = 2
    ) +
    labs(shape = "Status")
})
lapply(data_sub, \(x) {
  km_res <- kmeans(
    x = select(.data = x, -any_of(categories)),
    centers = 2L,
    nstart = 25L
  )
  km_cluster <- km_res$cluster - 1
  confusionMatrix(data = as.factor(x = km_cluster), as.factor(x = x$patho)) |>
    draw_confusion_matrix()
})
```

# Hierarchical clustering

```{r}
#| label: hc-pp
#| fig-align: center
lapply(data_sub, \(x) {
  hc_res <- agnes(x = select(.data = x, -any_of(categories)), method = "ward")
  hclust_plot(clust_data = hc_res, target = x$patho)
  confusionMatrix(
    data = hc_res |> cutree(k = 2L) |> subtract(e1 = 1) |> as.factor(),
    x$patho |> as.factor()
  ) |> draw_confusion_matrix()
})
```

# PCA

```{r}
#| label: pca-pp
#| fig-align: center
lapply(data_sub, \(x) {
  pca_res <- prcomp(x = select(.data = x, -any_of(categories)))
  autoplot(
    object = pca_res,
    data = select(.data = x, -any_of(categories)),
    loadings.label.size = 3
  ) +
    geom_point(
      mapping = aes(color = x$patho),
      size = 2
    ) +
    stat_ellipse(mapping = aes(group = x$patho, color = x$patho)) +
    labs(color = "Patho")
})
lapply(data_sub, \(x) {
  pca_res <- prcomp(x = select(.data = x, -any_of(categories)))
  fviz_pca_var(pca_res, select.var = list(contrib = 30), col.var = "contrib")
})
```

# PLS-DA

```{r}
#| label: plsda-pp
#| fig-align: center
lapply(data_sub, \(x){
  pls_res <- mixOmics::plsda(
    X = select(.data = x, -any_of(categories)),
    Y = as.factor(x = x$patho),
    ncomp = 5
  )
  pc1_var <- pls_res$prop_expl_var$X[[1]] * 100
  pc2_var <- pls_res$prop_expl_var$X[[2]] * 100
  ggplot(
    data = pls_res$input.X,
    mapping = aes(x = pls_res$variates$X[, 1], y = pls_res$variates$X[, 2])
  ) +
    geom_point(
      mapping = aes(color = x$patho),
      size = 2
    ) +
    stat_ellipse(mapping = aes(group = x$patho, colour = x$patho)) +
    xlab(label = paste0("Component 1 (", pc1_var |> round(digits = 1), "%)")) +
    ylab(label = paste0("Component 2 (", pc2_var |> round(digits = 1), "%)")) +
    labs(color = "patho")
})

lapply(data_sub, \(x) {
  pls_res <- caret::plsda(
    x = select(.data = x, -any_of(categories)),
    as.factor(x = x$patho),
    ncomp = 5,
    validation = "CV"
  )
  my_vips <- vip(object = pls_res, metric = "rmse")
  plot(x = my_vips)
  predict(
    object = pls_res,
    newdata = select(.data = test, -any_of(categories))
  ) |>
    as.factor() |>
    confusionMatrix(data = test$patho |> as.factor()) |>
    draw_confusion_matrix()
  validationplot(object = pls_res, val.type = "RMSE")
  validationplot(object = pls_res, val.type = "R2")
})

lapply(data_sub, \(x){
  pls_res <- caret::plsda(
    x = select(.data = x, -any_of(categories)),
    as.factor(x = x$patho),
    ncomp = 5,
    validation = "CV"
  )
  my_vips <- vip(object = pls_res, metric = "rmse")
  plot_data <- x |>
    select(c("patho", my_vips$data$Variable)) |>
    pivot_longer(
      cols = starts_with(match = "B"),
      names_to = "Buckets",
      values_to = "Value"
    )
  buckets_stats <- lapply(
    my_vips$data$Variable,
    \(z) wilcox.test(x[x$patho == "1", z], x[x$patho == "0", z])$p.value
  ) |>
    `names<-`(my_vips$data$Variable) |>
    lapply(p.adjust, method = "BH")
  ggplot(
    data = plot_data,
    mapping = aes(x = Buckets, y = Value, fill = patho)
  ) +
    geom_boxplot() +
    stat_compare_means(mapping = aes(group = patho), label = "p.signif") +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
})

lapply(data_sub, \(x){
  KODAMA::pls.double.cv(select(.data = x, -any_of(categories)), as.factor(x = x$patho), scaling = NULL, times = 10, runn = 10)[c("R2Y", "Q2Y")]
})
```

```{r}
#| label: corr
#| fig-align: center
spectra <- fread("Data/data.csv") |> 
  column_to_rownames("Samplecode")
corr_matrix <- cor(spectra, method = "pearson")

corr_long <- melt(as.matrix(corr_matrix))
ggplot(corr_long, aes(Var1, Var2, fill = value)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
  theme_minimal() +
  labs(title = "Spectral Data Correlation Heatmap", x = "Chemical Shift (ppm)", y = "Chemical Shift (ppm)")

```

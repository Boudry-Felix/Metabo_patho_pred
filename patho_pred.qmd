---
title: "Pathology prediction in rowers"
author: "FÃ©lix BOUDRY"
---

## Context

This analysis aim at detecting pathological athletes during an altitude training camp. To do so we used urine sample analysed by NMR. Here we try different models to detect the pathological samples to determine which one is the best.

```{r}
#| label: config
#| include: false
#| fig-align: center
set.seed(42)
library(tidyverse)
library(data.table)
library(knitr)
library(janitor)
library(psych)
library(kableExtra)
library(caret)
library(pls)
library(vip)
library(factoextra)
library(cluster)
library(ggfortify)
library(magrittr)
library(plotly)
library(ggpubr)
source("functions.R")

theme_set(new = theme_bw()) # ggplot theme
```

# Data description

```{r}
#| label: data-description
antrop_data <- fread(input = "Data/Subjects.csv") |>
  clean_names() |>
  select(c("age", "height", "weight"))
describe(x = antrop_data, na.rm = T) |>
  round(digits = 0) |>
  select(c("mean", "sd", "median", "min", "max")) |>
  kable(
    caption = paste0("Anthropological values (n = ", nrow(x = antrop_data), ")"),
    table.attr = 'data-quarto-disable-processing="true"'
  ) |>
  kable_styling(
    bootstrap_options = c("striped"),
    full_width = FALSE
  )
```

# Pre-processing

Pre-processing was done using [npflow](https://nmrprocflow.org).

```{r}
#| label: pre-processing
categories <- c("patho", "day", "Samplecode", "name", "surname", "discriminant", "date", "quatlity", "pathology_during")
data <- fread(input = "Data/data_clean.csv") |>
  mutate_at(
    .vars = vars(-any_of(categories)),
    .funs = \(x) ReplaceMissingByLoD(int.mat = x)
  ) |>
  mutate_at(
    .vars = vars(-any_of(categories)),
    .funs = \(x) scale(x = x)
  ) |>
  mutate_at(
    .vars = vars(any_of(categories)),
    .funs = \(x) as.factor(x = x)
  ) |>
  as.data.frame()
samples <- fread(input = "Data/samples_clean.csv")

data <- merge(x = data, y = samples, by = "Samplecode") |>
  column_to_rownames(var = "Samplecode") |>
  replace_na(list(patho = 0))
data$patho <- as.factor(data$patho)

data_first_patho <- filter(.data = data, data$day == "1" | data$patho == "1")
data_pre_patho <- filter(.data = data, lead(data$patho == "1") | data$patho == "1")
data_last_patho <- filter(.data = data, day == max(day) | patho == "1")

data_sub <- lst(data_first_patho, data_pre_patho, data_last_patho)

test <- data |>
  group_by(name, surname) %>%
  arrange(day) %>%
  mutate(next_after_patho = lag(patho, default = "0") == "1") %>%
  filter(day == "3" | patho == "1" | next_after_patho) %>%
  ungroup() %>%
  select(-next_after_patho)
```

# k-means

```{r}
#| label: km-pp
#| fig-align: center
lapply(data_sub, \(x) {
  km_res <- kmeans(
    x = select(.data = x, -any_of(categories)),
    centers = 2L,
    nstart = 25L
  )
  km_cluster <- km_res$cluster - 1
  fviz_cluster(
    object = km_res,
    data = select(.data = x, -any_of(categories)),
    geom = "none"
  ) +
    geom_point(
      mapping = aes(shape = "patho" |> as.factor()),
      size = 2
    ) +
    labs(shape = "Status")
})
lapply(data_sub, \(x) {
  km_res <- kmeans(
    x = select(.data = x, -any_of(categories)),
    centers = 2L,
    nstart = 25L
  )
  km_cluster <- km_res$cluster - 1
  confusionMatrix(data = as.factor(x = km_cluster), as.factor(x = x$patho)) |>
    draw_confusion_matrix()
})
```

# Hierarchical clustering

```{r}
#| label: hc-pp
#| fig-align: center
lapply(data_sub, \(x) {
  hc_res <- agnes(x = select(.data = x, -any_of(categories)), method = "ward")
  hclust_plot(clust_data = hc_res, target = x$patho)
  confusionMatrix(
    data = hc_res |> cutree(k = 2L) |> subtract(e1 = 1) |> as.factor(),
    x$patho |> as.factor()
  ) |> draw_confusion_matrix()
})
```

# PCA

```{r}
#| label: pca-pp
#| fig-align: center
lapply(data_sub, \(x) {
  pca_res <- prcomp(x = select(.data = x, -any_of(categories)))
  autoplot(
    object = pca_res,
    data = select(.data = x, -any_of(categories)),
    loadings.label.size = 3
  ) +
    geom_point(
      mapping = aes(color = x$patho),
      size = 2
    ) +
    stat_ellipse(mapping = aes(group = x$patho, color = x$patho)) +
    labs(color = "Patho")
})
```

# PLS-DA

```{r}
#| label: plsda-pp
#| fig-align: center
lapply(data_sub, \(x){
  pls_res <- mixOmics::plsda(
    X = select(.data = x, -any_of(categories)),
    Y = as.factor(x = x$patho),
    ncomp = 5
  )
  pc1_var <- pls_res$prop_expl_var$X[[1]] * 100
  pc2_var <- pls_res$prop_expl_var$X[[2]] * 100
  ggplot(
    data = pls_res$input.X,
    mapping = aes(x = pls_res$variates$X[, 1], y = pls_res$variates$X[, 2])
  ) +
    geom_point(
      mapping = aes(color = x$patho),
      size = 2
    ) +
    stat_ellipse(mapping = aes(group = x$patho, colour = x$patho)) +
    xlab(label = paste0("Component 1 (", pc1_var |> round(digits = 1), "%)")) +
    ylab(label = paste0("Component 2 (", pc2_var |> round(digits = 1), "%)")) +
    labs(color = "patho")
})

lapply(data_sub, \(x) {
  pls_res <- caret::plsda(
    x = select(.data = x, -any_of(categories)),
    as.factor(x = x$patho),
    ncomp = 5,
    validation = "CV"
  )
  my_vips <- vip(object = pls_res, metric = "rmse")
  plot(x = my_vips)
  predict(
    object = pls_res,
    newdata = select(.data = test, -any_of(categories))
  ) |>
    as.factor() |>
    confusionMatrix(data = test$patho |> as.factor()) |>
    draw_confusion_matrix()
  validationplot(object = pls_res, val.type = "RMSE")
  validationplot(object = pls_res, val.type = "R2")
})

lapply(data_sub, \(x){
  pls_res <- caret::plsda(
    x = select(.data = x, -any_of(categories)),
    as.factor(x = x$patho),
    ncomp = 5,
    validation = "CV"
  )
  my_vips <- vip(object = pls_res, metric = "rmse")
  plot_data <- x |>
    select(c("patho", my_vips$data$Variable)) |>
    pivot_longer(
      cols = starts_with(match = "B"),
      names_to = "Buckets",
      values_to = "Value"
    )
  buckets_stats <- lapply(
    my_vips$data$Variable,
    \(z) wilcox.test(x[x$patho == "1", z], x[x$patho == "0", z])$p.value
  ) |>
    `names<-`(my_vips$data$Variable) |>
    lapply(p.adjust, method = "BH")
  ggplot(
    data = plot_data,
    mapping = aes(x = Buckets, y = Value, fill = patho)
  ) +
    geom_boxplot() +
    stat_compare_means(mapping = aes(group = patho), label = "p.signif") +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
# DiscriMiner and/or KODAMA
# DisciMiner::plsDA(select(.data = data_rand_patho, -any_of(categories)), as.factor(x = data_rand_patho$Patho), cv = "LOO")
# KODAMA::pls.double.cv(select(.data = data_pre_patho_post, -any_of(categories)), as.factor(x = data_pre_patho_post$Patho))
```


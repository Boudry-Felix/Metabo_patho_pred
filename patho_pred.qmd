---
title: "Pathology prediction in rowers"
author: "FÃ©lix BOUDRY"
---

## Context

This analysis aim at detecting pathological athletes during an altitude training camp. To do so we used urine sample analysed by NMR. Here we try different models to detect the pathological samples to determine which one is the best.

```{r}
#| label: config
#| include: false
#| fig-align: center
set.seed(42)
library(tidyverse)
library(data.table)
library(knitr)
library(janitor)
library(psych)
library(kableExtra)
library(caret)
library(pls)
library(vip)
library(factoextra)
library(ggfortify)
library(magrittr)
library(cvms)
library(ggpubr)
library(reshape2)
library(KODAMA)
library(ggimage)
library(rsvg)
library(ropls)

theme_set(new = theme_bw()) # ggplot theme
```

# Import and pre-processing

Pre-processing was done using [npflow](https://nmrprocflow.org). This pre-processing is based on the [Rnmr1D](https://cran.r-project.org/web/packages/Rnmr1D/index.html) package.

```{r}
#| label: import & pre-processing
antrop_data <- fread(input = "Data/subjects.csv") |>
  clean_names() |>
  select(c("age", "height", "weight"))
categories <- c("patho", "day", "Samplecode", "name", "surname", "discriminant", "date", "quality", "pathology_during", "filter_condition")
data <- fread("Data/data.csv") |>
  mutate(across(-any_of(categories), ~ scale(.x))) |> # Normalise and scale data
  merge(fread("Data/samples.csv"), by = "Samplecode") |>
  replace_na(list(patho = 0, pathology_during = 0)) |>
  column_to_rownames(var = "Samplecode") |>
  mutate(patho = as.factor(patho))

# Define subsets datasets
cond_patho_day <- quo(patho == "1" & row_number() == min(which(patho == "1"))) # Sample on the first day of symptoms
cond_first_patho <- quo(day == min(day) & pathology_during == "1") # First sample of subject with later infection
cond_third_patho <- quo(day == "3" & pathology_during == "1") # Third sample of subject with later infection
cond_pre_patho <- quo(lead(patho == "1" & row_number() == min(which(patho == "1")))) # Sample on the day preceding symptoms
cond_last_healthy <- quo(day == max(day) & pathology_during != "1") # Samples of the last camp day of healthy athletes
cond_first_healthy <- quo(day == min(day) & pathology_during == "0") # First sample of subject without later infection
cond_third_healthy <- quo(day == "3" & pathology_during == "0") # Third sample of subject without later infection
cond_mid_healthy <- quo(day == "8" & pathology_during == "0") # Mid camp sample of subject without later infection

data_first_patho <- data |>
  arrange(day) |>
  filter(!!cond_patho_day | !!cond_first_patho, .by = c(name, surname)) |>
  mutate(filter_condition = factor(
    ifelse(patho == "1", "First Patho Day", "First day"),
    levels = c("First Patho Day", "First day")
  )) |>
  mutate(filter_condition = factor(
    ifelse(patho == "1", "0", "1"),
    levels = c("0", "1")
  )) |>
  suppressWarnings()

data_third_patho <- data |>
  arrange(day) |>
  filter(!!cond_patho_day | !!cond_third_patho, .by = c(name, surname)) |>
  mutate(filter_condition = factor(
    ifelse(patho == "1", "First Patho Day", "Third day"),
    levels = c("First Patho Day", "Third day")
  )) |>
  mutate(filter_condition = factor(
    ifelse(patho == "1", "0", "1"),
    levels = c("0", "1")
  )) |>
  suppressWarnings()

data_pre_patho <- data |>
  arrange(day) |>
  filter(!!cond_patho_day | !!cond_pre_patho, .by = c(name, surname)) |>
  mutate(filter_condition = factor(
    ifelse(patho == "1", "First Patho Day", "Pre Patho"),
    levels = c("First Patho Day", "Pre Patho")
  )) |>
  mutate(filter_condition = factor(
    ifelse(patho == "1", "0", "1"),
    levels = c("0", "1")
  )) |>
  suppressWarnings()

data_last_patho <- data |>
  arrange(day) |>
  filter(!!cond_patho_day | !!cond_last_healthy, .by = c(name, surname)) |>
  mutate(filter_condition = factor(
    ifelse(day == "12" | day == "11", "Last Healthy", "First Patho Day"),
    levels = c("Last Healthy", "First Patho Day")
  )) |>
  mutate(filter_condition = factor(
    ifelse(day == "12" | day == "11", "0", "1"),
    levels = c("0", "1")
  )) |>
  suppressWarnings()

data_first_third <- data |>
  arrange(day) |>
  filter(!!cond_first_healthy | !!cond_third_healthy, .by = c(name, surname)) |>
  mutate(filter_condition = factor(
    ifelse(day == "3", "Third Healthy", "First Healthy"),
    levels = c("Third Healthy", "First Healthy")
  )) |>
  mutate(filter_condition = factor(
    ifelse(day == "3", "0", "1"),
    levels = c("0", "1")
  )) |>
  suppressWarnings()

data_third_mid <- data |>
  arrange(day) |>
  filter(!!cond_third_healthy | !!cond_mid_healthy, .by = c(name, surname)) |>
  mutate(filter_condition = factor(
    ifelse(day == "3", "Third Healthy", "Mid Healthy"),
    levels = c("Third Healthy", "Mid Healthy")
  )) |>
  mutate(filter_condition = factor(
    ifelse(day == "3", "0", "1"),
    levels = c("0", "1")
  )) |>
  suppressWarnings()

data_patho_mid <- data |>
  arrange(day) |>
  filter(!!cond_patho_day | !!cond_mid_healthy, .by = c(name, surname)) |>
  mutate(filter_condition = factor(
    ifelse(day == "8", "Mid Healthy", "Patho"),
    levels = c("Mid Healthy", "Patho")
  )) |>
  mutate(filter_condition = factor(
    ifelse(day == "8", "0", "1"),
    levels = c("0", "1")
  )) |>
  suppressWarnings()

# Combine subsets into a list
data_sub <- list(
  data_first_patho = data_first_patho,
  data_third_patho = data_third_patho,
  data_pre_patho = data_pre_patho,
  data_last_patho = data_last_patho,
  data_first_third = data_first_third,
  data_third_mid = data_third_mid,
  data_patho_mid = data_patho_mid
)

# Test set
test <- data |>
  group_by(name, surname) |>
  arrange(day) |>
  mutate(next_after_patho = lag(patho, default = "0") == "1") |>
  filter(day == "3" | patho == "1" | next_after_patho) |>
  ungroup() |>
  select(-next_after_patho)
```

# Data description

```{r}
#| label: data-description
#| fig-align: center
# Subject description
describe(x = antrop_data, na.rm = TRUE) |>
  round(digits = 0) |>
  select(c("mean", "sd", "median", "min", "max")) |>
  kable(
    caption = paste0("Anthropological values (n = ", nrow(x = antrop_data), ")"),
    table.attr = 'data-quarto-disable-processing="true"'
  ) |>
  kable_styling(
    bootstrap_options = c("striped"),
    full_width = FALSE
  )

# PCA on full dataset by status
pca_res <- prcomp(x = select(.data = data, -any_of(categories)))
autoplot(
  object = pca_res,
  data = select(.data = data, -any_of(categories)),
  loadings.label.size = 3
) +
  geom_point(
    mapping = aes(color = data$patho),
    size = 2
  ) +
  stat_ellipse(mapping = aes(group = data$patho, color = data$patho)) +
  labs(color = "Patho")

# PCA on full dataset by subject
autoplot(
  object = pca_res,
  data = select(.data = data, -any_of(categories)),
  loadings.label.size = 3
) +
  geom_point(
    mapping = aes(color = rownames(data) |> str_extract("[:alpha:]+")),
    size = 2
  ) +
  geom_text(mapping = aes(label = rownames(data)), vjust = 0, hjust = 0) +
  stat_ellipse(mapping = aes(group = data$patho, color = data$patho)) +
  labs(color = "Subject & patho status")

# Buckets correlations
corr_matrix <- cor(select(data, -any_of(categories)), method = "pearson") |>
  as.matrix() |>
  melt()
ggplot(corr_matrix, aes(x = Var1, y = Var2, fill = value)) +
  geom_tile() +
  scale_x_discrete(breaks = levels(corr_matrix$Var2)[c(T, rep(F, 14))]) +
  scale_y_discrete(breaks = levels(corr_matrix$Var1)[c(T, rep(F, 14))]) +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
  labs(title = "Spectral Data Correlation Heatmap", x = "Chemical Shift (buckets)", y = "Chemical Shift (buckets)")
```

# PCA

```{r}
#| label: pca-pp
#| fig-align: center
lapply(data_sub, \(x) {
  # PCA computation
  pca_res <- prcomp(x = select(.data = x, -any_of(categories)))

  # PCA plot
  pca_plot <- autoplot(
    object = pca_res,
    data = select(.data = x, -any_of(categories)),
    loadings.label.size = 3
  ) +
    geom_point(
      mapping = aes(color = x$filter_condition),
      size = 2
    ) +
    geom_text(mapping = aes(label = rownames(x)), vjust = 0, hjust = 0) +
    stat_ellipse(mapping = aes(group = x$filter_condition, color = x$filter_condition)) +
    labs(color = "Condition")
  loadings_plot <- fviz_pca_var(pca_res, select.var = list(contrib = 30), col.var = "contrib")
  ropls_PCA <- opls(select(.data = x, -any_of(categories)), fig.pdfC = "none", info.txtC = "none")
  return(lst(pca_plot, loadings_plot, ropls_PCA))
})
```

# PLS-DA

```{r}
#| label: plsda-pp
#| fig-align: center
cross_table <- data.frame()
lapply(data_sub, \(x) {
  # PLSDA computation
  pls_res <- caret::plsda(
    x = select(.data = x, -any_of(categories)),
    as.factor(x = x$filter_condition),
    ncomp = 5,
    validation = "CV"
  )

  # Prepare scores data frame
  scores <- pls_res$scores[, c(1, 2)]
  scores_df <- as.data.frame(scores) |>
    mutate(Class = as.factor(x$filter_condition)) # Add class labels for coloring

  # PLSDA plot
  pls_plot <- ggplot(scores_df, aes(x = `Comp 1`, y = `Comp 2`, color = Class)) +
    geom_point(size = 3) +
    stat_ellipse() +
    geom_text(mapping = aes(label = rownames(x)), vjust = 0, hjust = 0) +
    labs(
      title = "PLS-DA Score Plot",
      x = "Component 1",
      y = "Component 2"
    )

  # VIP
  my_vips <- vip(object = pls_res, metric = "rmse")
  vip_table <- my_vips$data$Variable |>
    select(.data = x) |>
    describeBy(group = x$filter_condition) |>
    lapply(\(x) select(x, c("mean", "sd", "median", "min", "max")))

  vip_table <- (vip_table$`1` - vip_table$`0`) |> # Patho - non patho to give the evolution
    mutate_if(is.factor, as.numeric) |> 
    round(digits = 2)

  cross_table <<- rbind(cross_table, vip_table)

  vip_plot <- autoplot(my_vips)
  plot_data <- x |>
    select(c("filter_condition", my_vips$data$Variable)) |>
    pivot_longer(
      cols = starts_with(match = "B"),
      names_to = "Buckets",
      values_to = "Value"
    )
  buckets_stats <- lapply(
    my_vips$data$Variable,
    \(z) wilcox.test(x[x$filter_condition == "1", z], x[x$filter_condition == "0", z])$p.value
  ) |>
    `names<-`(my_vips$data$Variable) |>
    lapply(p.adjust, method = "BH")
  stat_plot <- ggplot(
    data = plot_data,
    mapping = aes(x = Buckets, y = Value, fill = filter_condition)
  ) +
    geom_boxplot() +
    stat_compare_means(mapping = aes(group = filter_condition), label = "p.signif") +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    labs(fill = "Condition")

  # Confusion matrix
  conf_mat_plot <- predict(
    object = pls_res,
    newdata = select(.data = test, -any_of(categories))
  ) |>
    as.factor() |>
    confusion_matrix(targets = test$patho |> as.factor()) |>
    plot_confusion_matrix()
  conf_mat <- predict(
    object = pls_res,
    newdata = select(.data = test, -any_of(categories))
  ) |>
    as.factor() |>
    confusionMatrix(data = test$patho |> as.factor())

  # Validation metrics
  valid_metrics <- pls.double.cv(select(.data = x, -any_of(categories)), as.factor(x = x$filter_condition), times = 1, runn = 10)[c("R2Y", "Q2Y")]
  ropls_PLSDA <- opls(select(.data = x, -any_of(categories)), y = x$filter_condition, fig.pdfC = "none", info.txtC = "none")
  return(lst(pls_plot, vip_plot, vip_table, stat_plot, conf_mat_plot, conf_mat, valid_metrics, ropls_PLSDA))
})
```

# Bucket table

```{r}
#| label: bucket_table
#| fig-align: center
mutate(
  cross_table,
  across(
    everything(), # Apply to all columns
    ~ ifelse(
      . > 0,
      paste0("<span style='color:green;'>&#9650; ", round(., 2), "</span>"),
      paste0("<span style='color:red;'>&#9660; ", round(., 2), "</span>")
    )
  )
) |>
  kableExtra::kable(escape = FALSE, format = "html") |>
  kableExtra::kable_styling(full_width = FALSE)
```
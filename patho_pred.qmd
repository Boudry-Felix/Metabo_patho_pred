---
title: "Pathology prediction in rowers"
author: "FÃ©lix BOUDRY"
format: 
    html:
      toc: true
      toc_depth: 3
      code-links:
         - text: Github
           href: https://github.com/fboudry/patho_pred.git
           icon: github
      other-links:
        - text: Lab
          href: https://espace-dev.fr
        - text: email
          href: mailto:felix.boudry@univ-perp.fr
      code-fold: show
      code-summary: "Show code"
      code-tools: 
          source: true
          toggle: true
---

## Context

We aim at detecting pathological athletes during an altitude training camp. To do so we used urine sample analysed by NMR. Here we try different model to detect the pathological samples to determine which one is the best.

```{r Config, include=FALSE}
set.seed(42)
library(tidyverse)
library(data.table)
library(knitr)
library(janitor)
library(psych)
library(kableExtra)
library(caret)
library(pls)
library(vip)
library(factoextra)
library(cluster)
library(ggfortify)
library(magrittr)
library(plotly)
source("functions.R")
```
    
# Data description

```{r}
antrop_data <- fread(input = "Data/Subjects.csv") |>
  clean_names() |>
  select(c("age", "height", "weight"))
describe(x = antrop_data, na.rm = T) |>
  round() |>
  select(c("mean", "sd", "median", "min", "max")) |>
  kable(caption = paste0("Anthropological values (n = ", nrow(antrop_data), ")"),
        table.attr = 'data-quarto-disable-processing="true"') |>
  kable_styling(bootstrap_options = c("striped"),
                full_width = FALSE)
```

# Pre-processing

Pre-processing was done using [npflow](https://nmrprocflow.org).

```{r}
data_pre_post <- fread(input = "Data/data_Patho_first_day.csv") |> 
  column_to_rownames(var = "Samplecode") |> 
  mutate_at(c(2:237), \(x) ReplaceMissingByLoD(x)) |>
  mutate_at(c(2:237), \(x) scale(x)) |> 
  lapply(as.numeric) |> 
  as.data.frame()

test_pre_post <- fread(input = "Data/test_set_first.csv") |> 
  column_to_rownames(var = "Samplecode") |> 
  mutate_at(c(2:237), \(x) ReplaceMissingByLoD(x)) |>
  mutate_at(c(2:237), \(x) scale(x)) |> 
  lapply(as.numeric) |> 
  as.data.frame()

data_rand <- fread(input = "Data/data_Patho_rand.csv") |> 
  column_to_rownames(var = "Samplecode") |> 
  mutate_at(c(2:380), \(x) ReplaceMissingByLoD(x)) |>
  mutate_at(c(2:380), \(x) scale(x)) |> 
  lapply(as.numeric) |> 
  as.data.frame()

test_rand <- fread(input = "Data/test_set_rand.csv") |> 
  column_to_rownames(var = "Samplecode") |> 
  mutate_at(c(2:380), \(x) ReplaceMissingByLoD(x)) |>
  mutate_at(c(2:380), \(x) scale(x)) |> 
  lapply(as.numeric) |> 
  as.data.frame()
```

# First vs. pathological comparison

We compare data from the first day with data from the day symptoms were observed. Do not forget that the subjects are training in altitude and an effect of chronic hypoxic exposure can be observed.

## k-means

```{r KM_PP}
km_res <- kmeans(x = data_pre_post,
                 centers = 2L,
                 nstart = 25L)
km_cluster <- km_res$cluster - 1
fviz_cluster(object = km_res,
             data = data_pre_post,
             geom = "none") +
  geom_point(aes(shape = (as.character(
    data_pre_post$Patho + 1
  ))), size = 2) +
  labs(shape = "Status")
confusionMatrix(as.factor(km_cluster), as.factor(data_pre_post$Patho)) |>
  draw_confusion_matrix()
```

## Hierarchical clustering

```{r HC_PP}
hc_res <- agnes(data_pre_post, method = "ward")
hclust_plot(clust_data = hc_res, target = data_pre_post$Patho)
confusionMatrix(
  hc_res |> cutree(k = 2L) |> subtract(e1 = 1) |> as.factor(),
  data_pre_post$Patho |> as.factor()
) |> draw_confusion_matrix()
```

## PCA

```{r PCA_PP}
pca_res <- prcomp(x = data_pre_post)
pca_scores <- data.frame(pca_res$x[, 1:2])
pca_plot <- autoplot(object = pca_res,
         data = data_pre_post,
         loadings.label.size = 3) +
  geom_point(aes(color = (as.character(
    data_pre_post$Patho + 1
  ))), size = 2) +
  stat_ellipse(aes(
    group = as.character(data_pre_post$Patho + 1),
    colour = as.character(data_pre_post$Patho + 1)
  )) +
  labs(color = "Patho")
ggplotly()
```

## PLS-DA

```{r PLS-DA_PP}
pls_res <- caret::plsda(data_pre_post, as.factor(data_pre_post$Patho), ncomp = 5)
pls_plot <- ggplot(pls_res$model, aes(pls_res$scores[, 1], pls_res$scores[, 2])) +
  geom_point(aes(color = (as.character(
    data_pre_post$Patho + 1
  ))), size = 2) +
  stat_ellipse(aes(
    group = as.character(data_pre_post$Patho + 1),
    colour = as.character(data_pre_post$Patho + 1)
  )) +
  labs(color = "Patho")
ggplotly()
vip(pls_res, metric = "rmse")
predict(pls_res, newdata = test_pre_post) |> as.factor() |>  confusionMatrix(test_pre_post$Patho |> as.factor()) |> draw_confusion_matrix()
validationplot(pls_res, val.type = "RMSE")
validationplot(pls_res, val.type = "R2")
# mvrValstats(pls_res, "all")
```

# Random comparison

We compare data from pathological subjects with data from non pathological ones on the same day to avoid differences induced by the hypoxic exposure.

## k-means

```{r KM_rand}
km_res <- kmeans(x = data_rand,
                 centers = 2L,
                 nstart = 25L)
km_cluster <- km_res$cluster - 1
fviz_cluster(object = km_res, data = data_rand, geom = "none") +
  geom_point(aes(shape = (as.character(data_rand$Patho + 1))), size = 2) +
  labs(shape = "Status")
confusionMatrix(as.factor(km_cluster), as.factor(data_rand$Patho)) |>
  draw_confusion_matrix()
```

## Hierarchical clustering

```{r HC_rand}
hc_res <- agnes(data_rand, method = "ward")
hclust_plot(clust_data = hc_res, target = data_rand$Patho)
confusionMatrix(
  hc_res |> cutree(k = 2) |> subtract(e1 = 1) |> as.factor(),
  data_rand$Patho |> as.factor()
) |> draw_confusion_matrix()
```

## PCA

```{r PCA_rand}
pca_res <- prcomp(x = data_rand)
pca_scores <- data.frame(pca_res$x[, 1:2])
pca_plot <- autoplot(object = pca_res,
         data = data_rand,
         loadings.label.size = 3) +
  geom_point(aes(color = (as.character(
    data_rand$Patho + 1
  ))), size = 2) +
  stat_ellipse(aes(
    group = as.character(data_rand$Patho + 1),
    colour = as.character(data_rand$Patho + 1)
  )) +
  labs(color = "Patho")
ggplotly()
```

## PLS-DA

```{r PLS-DA_rand}
pls_res <- caret::plsda(data_rand, as.factor(data_rand$Patho), ncomp = 5)
pls_plot <- ggplot(pls_res$model, aes(pls_res$scores[, 1], pls_res$scores[, 2])) +
  geom_point(aes(color = (as.character(data_rand$Patho + 1))), size = 2) +
  stat_ellipse(aes(
    group = as.character(data_rand$Patho + 1),
    colour = as.character(data_rand$Patho + 1)
  )) +
  labs(color = "Patho")
ggplotly()
vip(pls_res, metric = "rmse")
predict(pls_res, newdata = test_rand) |> as.factor() |>  confusionMatrix(test_rand$Patho |> as.factor()) |> draw_confusion_matrix()
validationplot(pls_res, val.type = "RMSE")
validationplot(pls_res, val.type = "R2")
# mvrValstats(pls_res, "all")
```

# Full dataset detection

We try to identify pathological data among the full data set.

# Metabolites of interest evolution

---
title: "Pathology prediction in rowers"
author: "FÃ©lix BOUDRY"
---

## Context

This analysis aim at detecting pathological athletes during an altitude training camp. To do so we used urine sample analysed by NMR. Here we try different models to detect the pathological samples to determine which one is the best.

```{r}
#| label: config
#| include: false
#| fig-align: center
set.seed(42)
library(tidyverse)
library(data.table)
library(knitr)
library(janitor)
library(psych)
library(kableExtra)
library(ggfortify)
library(ropls)
library(reshape2)

theme_set(new = theme_bw()) # ggplot theme
```

# Import and pre-processing

Pre-processing (baseline, alignement and bucketing) was done using [npflow](https://nmrprocflow.org). This pre-processing is based on the [Rnmr1D](https://cran.r-project.org/web/packages/Rnmr1D/index.html) package.

```{r}
#| label: import & pre-processing
antrop_data <- fread(input = "Data/subjects.csv") |>
  clean_names() |>
  select(c("age", "height", "weight"))
categories <- c("patho", "day", "Samplecode", "name", "surname", "discriminant", "date", "quality", "pathology_during", "filter_condition")
data <- fread("Data/data.csv") |>
  mutate(across(-any_of(categories), ~ scale(.x))) |> # Normalise and scale data
  merge(fread("Data/samples.csv"), by = "Samplecode") |>
  replace_na(list(patho = 0, pathology_during = 0)) |>
  column_to_rownames(var = "Samplecode") |>
  mutate(patho = as.factor(patho))

# Define subsets datasets
cond_patho_day <- quo(patho == "1" & row_number() == min(which(patho == "1"))) # Sample on the first day of symptoms
cond_first_patho <- quo(day == min(day) & pathology_during == "1") # First sample of subject with later infection
cond_first_healthy <- quo(day == min(day) & pathology_during == "0") # First sample of subject without later infection
cond_third_healthy <- quo(day == "3" & pathology_during == "0") # Third sample of subject without later infection
cond_mid_healthy <- quo(day == "8" & pathology_during == "0") # Mid camp sample of subject without later infection

data_first_patho <- data |>
  arrange(day) |>
  filter(!!cond_patho_day | !!cond_first_patho, .by = c(name, surname)) |>
  mutate(filter_condition = factor(
    ifelse(patho == "1", "First Patho Day", "First day"),
    levels = c("First Patho Day", "First day")
  )) |>
  mutate(filter_condition = factor(
    ifelse(patho == "1", "0", "1"),
    levels = c("0", "1")
  )) |>
  suppressWarnings()

data_first_third <- data |>
  arrange(day) |>
  filter(!!cond_first_healthy | !!cond_third_healthy, .by = c(name, surname)) |>
  mutate(filter_condition = factor(
    ifelse(day == "3", "Third Healthy", "First Healthy"),
    levels = c("Third Healthy", "First Healthy")
  )) |>
  mutate(filter_condition = factor(
    ifelse(day == "3", "0", "1"),
    levels = c("0", "1")
  )) |>
  suppressWarnings()

data_first_mid <- data |>
  arrange(day) |>
  filter(!!cond_first_healthy | !!cond_mid_healthy, .by = c(name, surname)) |>
  mutate(filter_condition = factor(
    ifelse(day == "8", "First Healthy", "Mid"),
    levels = c("First Healthy", "Mid")
  )) |>
  mutate(filter_condition = factor(
    ifelse(day == "8", "0", "1"),
    levels = c("0", "1")
  )) |>
  suppressWarnings()

# Combine subsets into a list
data_sub <- list(
  data_first_patho = data_first_patho,
  data_first_third = data_first_third,
  data_first_mid = data_first_mid
)

# test_df set
test_df <- data |>
  group_by(name, surname) |>
  arrange(day) |>
  mutate(next_after_patho = lag(patho, default = "0") == "1") |>
  filter(day == "3" | patho == "1" | next_after_patho) |>
  ungroup() |>
  select(-next_after_patho)
```

# Data description

Three datasets are used:

- The first is used to compare athletes that have been ill during the camp between their first sample and the day they indicated symptoms.
- The second dataset is used to compare athletes that have not been ill during the camp between their first and third sample.
- The last dataset is based on the same athletes but used to compare their third samples to their eights ones (corresponding to the mean day of first symptoms of ill athletes).

```{r}
#| label: data-description
#| fig-align: center
# Subject description
describe(x = antrop_data, na.rm = TRUE) |>
  round(digits = 0) |>
  select(c("mean", "sd", "median", "min", "max")) |>
  kable(
    caption = paste0("Anthropological values (n = ", nrow(x = antrop_data), ")"),
    table.attr = 'data-quarto-disable-processing="true"'
  )

# PCA on full dataset by status
pca_res <- prcomp(x = select(.data = data, -any_of(categories)))
autoplot(
  object = pca_res,
  data = select(.data = data, -any_of(categories)),
  loadings.label.size = 3
) +
  geom_point(
    mapping = aes(color = data$patho),
    size = 2
  ) +
  stat_ellipse(mapping = aes(group = data$patho, color = data$patho)) +
  ggtitle("PCA of the full dataset") +
  labs(color = "Patho")

# PCA on full dataset by subject
autoplot(
  object = pca_res,
  data = select(.data = data, -any_of(categories)),
  loadings.label.size = 3
) +
  geom_point(
    mapping = aes(color = rownames(data) |> str_extract("[:alpha:]+")),
    size = 2
  ) +
  geom_text(mapping = aes(label = rownames(data)), vjust = 0, hjust = 0) +
  stat_ellipse(mapping = aes(group = data$patho, color = data$patho)) +
  ggtitle("PCA of the full dataset with groups by athletes") +
  labs(color = "Subject & patho status")

# Buckets correlations
corr_matrix <- cor(select(data, -any_of(categories)), method = "pearson") |>
  as.matrix() |>
  melt()
ggplot(corr_matrix, aes(x = Var1, y = Var2, fill = value)) +
  geom_tile() +
  scale_x_discrete(breaks = levels(corr_matrix$Var2)[c(T, rep(F, 14))]) +
  scale_y_discrete(breaks = levels(corr_matrix$Var1)[c(T, rep(F, 14))]) +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
  labs(title = "Spectral Data Correlation Heatmap", x = "Chemical Shift (buckets)", y = "Chemical Shift (buckets)")
```

{{< pagebreak >}}

# PCA

```{r}
#| label: PCA ropls
#| fig-align: center
tmp <- lapply(data_sub, \(x) {
  opls(select(.data = x, -any_of(categories)))
})
```

{{< pagebreak >}}

# PLS-DA

```{r}
#| label: PLS-DA ropls
#| fig-align: center
lapply(data_sub, \(x) {
  opls(select(.data = x, -any_of(categories)), y = x$filter_condition) |>
    getVipVn() |>
    sort(decreasing = TRUE) |>
    head(n = 10)
})
```